import mmcv
import numpy as np
import pandas as pd

from pycocotools.coco import COCO

def load_detection_results(result_file, anno_file):
    """Load detection result from .json file (generated by coco API)

    This method provides a unified api for loading detection results.

    Args:
        result_file (str): Filename of result file
        anno_file (str): Filename of annotation file
    
    Returns:
        bbox, segmentation, score, category_id of each image file
    """
    coco = COCO(anno_file)
    coco_result = coco.loadRes(result_file)
    det_data = coco_result.dataset['annotations']

    det_results = []
    prog_bar = mmcv.ProgressBar(len(det_data))
    # result keys: image_id, bbox, category_id, segmentation, area, id, iscrowd
    for det_data_ in det_data:
        image_id = det_data_['image_id']
        image_name = coco.loadImgs(image_id)[0]['file_name']
        det_data_["image_name"] = image_name

        det_results.append(det_data_)

        prog_bar.update()
    
    return det_results


def dump_detection_results(dump_dir, det_results, dataset='visdrone'):
    """Dump detection results to txt files for submiting.

    This method provides a unified api for dumping detection results as txt file.
    
    Args:
        dump_dir (str): detection results saving dir
        det_results (list): detection results as list ([{}, {}])
        dataset (str): visdrone or dota dataset, select formats to save. For dota, use category to save result, for visdrone, use image name to save result.

    Returns:
        No 
    """
    pass


def dict2excel(data, save_file='./dict_excel.xlsx'):
    df = pd.DataFrame(data=data, index=[0])
    df.to_excel(save_file)


def load_coco_pkl_results(result_file):
    """load results of MMDetection (.pkl)
    
    Arguments:
        result_file {str} -- path for pkl result file
    """
    bboxes = []
    segms = []
    results = mmcv.load(result_file)
    for result in results:
        if len(result) == 1:
            bbox_result, segm_result = result, None
        else:
            bbox_result, segm_result = result
        bbox = np.vstack(bbox_result)
        if segm_result is not None:
            segm = mmcv.concat_list(segm_result)
        
        bboxes.append(bbox)
        segms.append(segm)
            
    return bboxes, segms